// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GenesysCloudMessenger
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin
import Foundation
import GenesysCloudCore
import MessengerTransport
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class TranslationsRepositoryImplementation : ObjectiveC.NSObject, GenesysCloudMessenger.TranslationsRepositoryProtocol {
  @objc public init(fileDataSource: any GenesysCloudMessenger.TranslationsDataSourceDelegate, remoteDataSource: any GenesysCloudMessenger.TranslationsDataSourceDelegate, parser: GenesysCloudMessenger.TranslationsParser)
  @objc public func load(language: Swift.String, fallbackLanguage: Swift.String? = nil, completion: @escaping (GenesysCloudMessenger.TranslationsResponse?) -> Swift.Void)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(_ hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
}
@_inheritsConvenienceInitializers @objc public class TranslationsKeys : ObjectiveC.NSObject {
  @objc public static let startConversationMessage: Swift.String
  @objc public static let conversationStartedMessage: Swift.String
  @objc public static let inputMessagePlaceholder: Swift.String
  @objc public static let inputMessageSpeechPlaceholder: Swift.String
  @objc public static let conversationRecoveryFailure: Swift.String
  @objc public static let conversationHasEnded: Swift.String
  @objc public static let startNewConversation: Swift.String
  @objc public static let conversationHasResumed: Swift.String
  @objc public static let startNew: Swift.String
  @objc public static let resumeConversation: Swift.String
  @objc public static let startNewConverstaionError: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TranslationsRemoteDataSource : ObjectiveC.NSObject, GenesysCloudMessenger.TranslationsDataSourceDelegate {
  @objc public func fetch(language: Swift.String, completion: @escaping (Foundation.Data?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MessengerChatSettings : GenesysCloudCore.ChatSettings {
  @objc override public var uiSettings: Any? {
    @objc get
    @objc set
  }
  @objc override public func isFeatureEnabled(name: GenesysCloudCore.Feature, defaultValue: Swift.Bool, data: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MessengerUIConfig : ObjectiveC.NSObject {
  @objc public var outgoingUI: GenesysCloudMessenger.MessageConfig {
    @objc get
    @objc set
  }
  @objc public var incomingUI: GenesysCloudMessenger.MessageConfig {
    @objc get
    @objc set
  }
  @objc public var systemUI: GenesysCloudMessenger.MessageConfig {
    @objc get
    @objc set
  }
  @objc public var dateSeparatorColor: UIKit.UIColor
  @objc public var dateSeparatorFontSize: Swift.Double
  @objc public var dateSeparatorAlignment: UIKit.NSTextAlignment
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var dateSeparatorDateFormat: Swift.String
  @objc public var dateSeparatorHeight: Swift.Double
  @objc public var dateSeparatorMargin: Swift.Double
  @objc public var locale: Swift.String?
  @objc public var errorViewTextColor: UIKit.UIColor
  @objc public var errorViewBackgroundColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MessageConfig : ObjectiveC.NSObject {
  @objc public var messageColor: UIKit.UIColor?
  @objc public var messageFontColor: UIKit.UIColor?
  @objc public var messageFontSize: Swift.Double
  @objc public var messageTimeFontColor: UIKit.UIColor?
  @objc public var messageTimeFontSize: Swift.Double
  @objc public var enableAvatar: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TranslationsRepositoryProtocol {
  @objc func load(language: Swift.String, fallbackLanguage: Swift.String?, completion: @escaping (GenesysCloudMessenger.TranslationsResponse?) -> Swift.Void)
}
public protocol MessengerTransportProtocol {
  func createMessagingClient(with configuration: MessengerTransport.Configuration) -> any MessengerTransport.MessagingClient
  func fetchDeploymentConfig(with configuration: MessengerTransport.Configuration, completionHandler: @escaping (MessengerTransport.DeploymentConfig?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc public class TranslationsParser : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TranslationsFileDataSource : ObjectiveC.NSObject, GenesysCloudMessenger.TranslationsDataSourceDelegate {
  @objc public func fetch(language: Swift.String, completion: @escaping (Foundation.Data?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TranslationsDataSourceDelegate {
  @objc func fetch(language: Swift.String, completion: @escaping (Foundation.Data?) -> Swift.Void)
}
@objc public class MessengerChatEngine : ObjectiveC.NSObject {
  @objc public var account: GenesysCloudMessenger.MessengerChatEngine.AccountType {
    @objc get
    @objc set
  }
  @objc weak public var delegate: (any GenesysCloudCore.ChatEngineDelegate)?
  public var configurationLoader: any GenesysCloudCore.ConfigurationLoader
  public typealias AccountType = GenesysCloudMessenger.MessengerAccount
  @objc required public init(configLoader: any GenesysCloudCore.ConfigurationLoader)
  @objc public func updateCustomAttributes(_ newValue: [Swift.String : Swift.String])
  @objc deinit
}
extension GenesysCloudMessenger.MessengerChatEngine : GenesysCloudCore.ChatEngine {
  @objc dynamic public func prepare(account: GenesysCloudMessenger.MessengerChatEngine.AccountType)
  @objc dynamic public func create()
  @objc dynamic public func start()
  @objc dynamic public func postMessage(_ chatStatement: GenesysCloudCore.ChatStatement)
  @objc dynamic public func reconnect()
  @objc dynamic public func endChat(forceClose: Swift.Bool = false)
  @objc dynamic public func resume()
}
extension GenesysCloudMessenger.MessengerChatEngine : GenesysCloudCore.ConfigurationLoaderDelegate {
  @objc dynamic public func didFetchChatSettings(settings: GenesysCloudCore.ChatSettings)
  @objc dynamic public func didFailLoad(error: (any Swift.Error)?)
}
extension GenesysCloudMessenger.MessengerChatEngine : GenesysCloudCore.ChatDataProducer {
  @discardableResult
  @objc dynamic public func produceChatData(_ request: GenesysCloudCore.ChatDataRequest) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class MessengerAccount : GenesysCloudCore.Account {
  @objc public var customAttributes: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(deploymentId: Swift.String, domain: Swift.String, logging: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TranslationsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MessengerConfigurationLoader : ObjectiveC.NSObject, GenesysCloudCore.ConfigurationLoader {
  @objc weak public var delegate: (any GenesysCloudCore.ConfigurationLoaderDelegate)?
  @objc public var parser: any GenesysCloudCore.ConfigurationParser
  @objc override dynamic public init()
  @objc public init(translationsRepository: (any GenesysCloudMessenger.TranslationsRepositoryProtocol)? = nil)
  @objc public func load(account: GenesysCloudCore.Account)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TranslationsLocaleParser : ObjectiveC.NSObject {
  @objc public func parse(locale: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
